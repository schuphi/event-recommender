# Copenhagen Event Recommender - Development Docker Compose
# Optimized for local development with hot reloading and debugging

version: '3.8'

services:
  # Development API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        BUILD_ENV: development
    container_name: event-recommender-api-dev
    ports:
      - "8000:8000"
      - "5678:5678"  # Debugging port
    environment:
      - DATABASE_URL=data/events.duckdb
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - JWT_SECRET_KEY=development-secret-key-not-for-production
      - ENABLE_METRICS=true
      - LOG_LEVEL=DEBUG
      - RELOAD=true
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID:-}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET:-}
      - LASTFM_API_KEY=${LASTFM_API_KEY:-}
      - EVENTBRITE_API_TOKEN=${EVENTBRITE_API_TOKEN:-}
      - MEETUP_API_KEY=${MEETUP_API_KEY:-}
      - INSTAGRAM_USERNAME=${INSTAGRAM_USERNAME:-}
      - INSTAGRAM_PASSWORD=${INSTAGRAM_PASSWORD:-}
    volumes:
      - .:/app  # Mount entire project for hot reload
      - dev_data:/app/data
      - dev_logs:/app/logs
      - dev_cache:/app/cache
    command: ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]
    restart: "no"  # Don't auto-restart in development
    networks:
      - dev_network

  # Development Data Collection Service
  data-collector-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        BUILD_ENV: development
    container_name: event-recommender-collector-dev
    environment:
      - DATABASE_URL=data/events.duckdb
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID:-}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET:-}
      - LASTFM_API_KEY=${LASTFM_API_KEY:-}
      - EVENTBRITE_API_TOKEN=${EVENTBRITE_API_TOKEN:-}
      - MEETUP_API_KEY=${MEETUP_API_KEY:-}
      - INSTAGRAM_USERNAME=${INSTAGRAM_USERNAME:-}
      - INSTAGRAM_PASSWORD=${INSTAGRAM_PASSWORD:-}
      - ENABLE_INSTAGRAM_SCRAPING=true
      - ENABLE_TIKTOK_SCRAPING=true
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - dev_data:/app/data
      - dev_logs:/app/logs
      - dev_cache:/app/cache
    command: ["python", "data-collection/pipeline/integrated_data_pipeline.py"]
    restart: "no"
    depends_on:
      - redis-dev
    networks:
      - dev_network
    profiles:
      - data-collection  # Start with: docker-compose --profile data-collection up

  # Development Redis
  redis-dev:
    image: redis:7-alpine
    container_name: event-recommender-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - dev_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - dev_network

  # Test Database (separate from development)
  test-db:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: event-recommender-test-db
    environment:
      - DATABASE_URL=test_events.duckdb
    volumes:
      - .:/app
      - test_data:/app/data
    command: ["python", "-c", "import duckdb; conn = duckdb.connect('data/test_events.duckdb'); conn.close(); print('Test database ready')"]
    networks:
      - dev_network
    profiles:
      - testing

  # Jupyter Development Environment
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        BUILD_ENV: development
    container_name: event-recommender-jupyter
    ports:
      - "8888:8888"
    environment:
      - DATABASE_URL=data/events.duckdb
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - .:/app
      - dev_data:/app/data
      - jupyter_data:/home/app/.jupyter
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=development"]
    restart: "no"
    depends_on:
      - redis-dev
    networks:
      - dev_network
    profiles:
      - jupyter

  # Development Documentation Server
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: event-recommender-docs
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    command: ["mkdocs", "serve", "--dev-addr=0.0.0.0:8080"]
    restart: "no"
    networks:
      - dev_network
    profiles:
      - docs

  # Development Monitoring (lightweight)
  grafana-dev:
    image: grafana/grafana:latest
    container_name: event-recommender-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - dev_grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - dev_network
    profiles:
      - monitoring

volumes:
  dev_data:
    driver: local
  dev_logs:
    driver: local
  dev_cache:
    driver: local
  dev_redis_data:
    driver: local
  test_data:
    driver: local
  jupyter_data:
    driver: local
  dev_grafana_data:
    driver: local

networks:
  dev_network:
    driver: bridge
    name: event-recommender-dev