# Copenhagen Event Recommender - Continuous Integration Pipeline
# Comprehensive CI/CD with testing, security scanning, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # Only main branch for now
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lightweight API Tests
  quick-test:
    runs-on: ubuntu-latest
    name: Quick API Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install minimal dependencies
      env:
        DISABLE_TORCH: "true"
      run: |
        python -m pip install --upgrade pip
        # Install only essential packages for API testing
        pip install fastapi uvicorn duckdb pandas python-dotenv pydantic httpx pytest
    
    - name: Basic API test
      env:
        DATABASE_URL: "./test.duckdb"
        DISABLE_TORCH: "true"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "Testing basic API functionality..."
        cd backend
        python -c "
        try:
            from app.main import app
            print('‚úÖ FastAPI app imports successfully')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            exit(1)
        "
        echo "API test completed"

  # Railway Deployment Check
  railway-deploy-test:
    runs-on: ubuntu-latest
    name: Railway Deployment Test
    needs: [quick-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Railway Dockerfile build
      run: |
        echo "Testing Railway-compatible Docker build..."
        docker build --target production -t test-railway .
        echo "‚úÖ Docker build successful"
    
    - name: Test container startup
      run: |
        echo "Testing container startup..."
        docker run -d --name test-container -p 8000:8000 \
          -e DATABASE_URL=/app/data/events.duckdb \
          -e PORT=8000 \
          test-railway
        
        # Wait for startup
        sleep 15
        
        # Test health endpoint
        if curl -f http://localhost:8000/health; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          docker logs test-container
          exit 1
        fi
        
        docker stop test-container
        docker rm test-container

  # Summary
  summary:
    runs-on: ubuntu-latest
    name: Build Summary
    needs: [quick-test, railway-deploy-test]
    if: always()
    
    steps:
    - name: Report Results
      run: |
        echo "üöÄ Copenhagen Event Recommender CI Summary"
        echo "=========================================="
        echo "Quick Test: ${{ needs.quick-test.result }}"
        echo "Railway Deploy Test: ${{ needs.railway-deploy-test.result }}"
        
        if [[ "${{ needs.quick-test.result }}" == "success" && "${{ needs.railway-deploy-test.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed - Ready for Railway deployment!"
        else
          echo "‚ùå Some checks failed - Review logs before deploying"
        fi